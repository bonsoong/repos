아파치에서 제공하는 "tomcat-connector" 를 이용하면 
아파치와 톰캣을 연결하여 아파치 포트(80)로 접속하게 되면
톰캣 웹화면이 출력되게끔 해주는 커넥터입니다.
물론, 톰캣 포트를 그냥 8080을 80으로 변경해서 접속해도 가능하나 
보안이 문제가 된다고 합니다.
해당 포스팅에는 톰캣을 80으로 적용시 발생되는 문제점은 다루지 않도록 하겠습니다.
그럼 이전 포스팅에 이어서 apache + tomcat 연동법을 공유하도록 하겠습니다.

2014/12/09 - [개발에필요한연동법/리눅스서버구축] - CentOS 6.5 - Tomcat7 다운로드 + 서버 실행 및 방화벽 해제 알아보기
2014/12/10 - [개발에필요한연동법/리눅스서버구축] - CentOS wget을 이용하여 Apache 2.4 다운로드 및 서버 실행 (방화벽해제 포함)


아파치와 톰캣이 설치되어있다는 가정하에 진행하도록 하겠습니다.

tomcat-connector파일을 wget명령어를 이용하여 다운로드 받도록 하겠습니다.

[root@localhost local]# cd /usr/local
[root@localhost local]# wget http://apache.mirror.cdnetworks.com/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.40-src.tar.gz -O connector.tar.gz
--2014-12-10 10:57:29--  http://apache.mirror.cdnetworks.com/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.40-src.tar.gz
Resolving apache.mirror.cdnetworks.com... 61.110.198.174
Connecting to apache.mirror.cdnetworks.com|61.110.198.174|:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1526449 (1.5M) [application/x-gzip]
Saving to: `connector.tar.gz'

100%[======================================>] 1,526,449   4.39M/s   in 0.3s

2014-12-10 10:57:49 (4.39 MB/s) - `connector.tar.gz' saved [1526449/1526449]

다운로드가 완료되었나요? 
그럼 압축 해제를 한다음 
컴파일 + 인스톨진행 하도록 하겠습니다.

[root@localhost local]# tar -zxvf connector.tar.gz
[root@localhost local]# cd tomcat-connectors-1.2.40-src/native/
[root@localhost native]# ./configure --with-apxs=/usr/local/apache/bin/apxs
[root@localhost native]# make && make install

apxs가 없는 경우
$yum install httpd-devel
위의 명령으로 설치하고 
$which apxs


커넥터 설치가 완료되었다면 아파치 디렉토리내에 있는 "conf" 디렉토리로 이동합니다.

[root@localhost native]# cd /usr/local/apache/conf/

아파치와 톰캣을 연결해주는 중요 설정부분이므로 
각 순서별로 진행하시면 되겠습니다.

workers.properties 파일생성
[root@localhost conf]# vi workers.properties

workers.tomcat_home="/usr/local/apache-tomcat-7.0.57"
workers.java_home="/usr/java/jdk1.7.0_72"
ps=/
worker.list=ajp13
worker.ajp13.port=8009
worker.ajp13.host=localhost
worker.ajp13.type=ajp13

workers.tomcat_home에 대입되는 경로는 
톰캣디렉토리경로를 작성해주면 되겠습니다.
workers.java_home에는 JDK의 디렉토리 설치경로를 
작성해주시면 되겠고요.

mod_jk.conf 파일생성
[root@localhost conf]# vi mod_jk.conf

<IfModule mod_jk.c>
        JkWorkersFile "/usr/local/apache/conf/workers.properties"
        JkLogFile "/usr/local/apache-tomcat-7.0.57/logs/mod_jk.log"
        JkLogLevel info
        JkAutoAlias "/usr/local/apache-tomcat-7.0.57/webapps"
        JkMount /* ajp13
        JkMount /*.jsp ajp13
        JkMount /servlet/* ajp13
        JkMount /examples/*.jsp ajp13
        JkLogStampFormat "[%a %b %d %H:%M:%S %Y]"
        JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories
        JkRequestLogFormat "%w %V %T"
</IfModule>











JkWorkersFile에는 workers.properties 파일경로를 작성해줍니다.

 

JkLogFile의 경우는 톰캣의 로그디렉토리에 

"mod_jk.log" 파일명을 선언해줍니다

( mod_jk.log 에 대한 파일명은 필수는 아닐거같군요.)




이어서 conf디렉토리내에 존재하는 httpd.conf파일에 

해당 코드들을 추가해주도록 합니다.







httpd.conf 코드 추가



[root@localhost conf]# vi httpd.conf








vi 실행 후 하단으로 좀 내리다보면

 LoadModule이라고 여러개 선언되어있는 부분이 있는데 

이 부분에 맨 끝라인 다음줄에 다음 코드를 추가해주도록 합니다.






LoadModule jk_module modules/mod_jk.so
















httpd.conf 파일 맨 끝으로 내린 후, 

코드를 추가해주도록 합니다.



include conf/mod_jk.conf


















지금까지 했던 부분이 아파치와 톰캣 연동에 마지막 절차입니다.

자 그럼 아파치와 톰캣서버를 각각 실행시켜주도록 해보겠습니다.







아파치 실행



[root@localhost local]# cd /usr/local/apache-tomcat-7.0.57/bin/
[root@localhost bin]# ./startup.sh





톰캣 실행



[root@localhost bin]# cd /usr/local/apache/bin/
[root@localhost bin]# ./apachectl start








기존  80포트 접속시 "it works!" 라는 문구가 출력이 되었으나 

톰캣커넥터 연동으로 인하여 하단과 동일한 실행화면이 출력될 것입니다.

Apache HTTP 서버와 Tomcat서버의 연동

1. Apache와 Tomcat을 연동하는 이유
•Tomcat 서버는 본연의 임무인 서블릿 컨테이너의 역할만 하고, Apache HTTP Server는 웹서버의 역할을 하도록 각각의 기능을 분리하기 위해 연동을 할 수 있다.
•Apache HTTP Server에서 제공하는 편리한 기능을 사용하기 위해서 연동을 할수 있다.
•대규모 사용자가 사용하는 시스템을 구축할 때 웹 서버인 아파치와 연동을 하면 부하 분산의 효과를 가질 수 있다. mod_jk의 Load Balancing과 FailOver 기능을 사용하여 안정적으로 운영 할 수 있다.

2. Apache와 Tomcat 연동하기
•아래 내용은 윈도우 OS를 기준으로 설명하였다.

2.1 mod_jk 다운로드 및 설정
•http://www.apache.org/dist/tomcat/tomcat-connectors/jk/binaries/windows/ 에서 버전에 맞는 파일을 다운 받아 $APACHE_HOME/modules 디렉토리에 복사한다.
•Apache HTTP 서버 2.2.x 버전을 설치하였다면 tomcat-connectors-1.2.37-windows-i386-httpd-2.2.x.zip 파일을 다운 받는다
•httpd.conf 파일의 LoadModule 부분에 mod_jk Module을 추가한다.


httpd.conf

# jk_module 추가
LoadModule jk_module modules/mod_jk.so


2.2 workers.properties 파일 설정
•apache와 tomcat를 연동하기위해서는 workers.properties 파일을 설정해야 한다.
•$APACHE_HOME/conf/workers.properties 파일을 아래 예제와 같이 생성한다.
•workers.properties 파일은 일반적으로 httpd.conf 파일과 같은 디렉토리에 위치하게 설정한다.


workers.properties

worker.list=sample

# 톰캣 server.xml 파일 AJP/1.3 Connector의 Port를 입력한다.
worker.sample.port=8009

# 톰탯 server 호스트
worker.sample.host=localhost

# 아파치 + 톰캣 통신 프로토콜
worker.sample.type=ajp13

•※참고 Tomcat Worker •톰캣 워커는(Tomcat worker) 웹서버로부터의 서블릿 요청을 톰캣 프로세스(Worker)에게 전달하여 요청을 처리하는 톰캣 인스턴스이다.
•대부분 하나의 worker를 사용하나, load 밸런싱이나 site 파티셔닝을 위해 여러개의 worker를 사용 할 수 있다.
•워커 타입에는 ajp12, ajp13, jni, lb 등이 있다.


2.3 workers.properties 경로 지정
•httpd.conf 파일에 workers.properties 파일 경로를 지정한다.


httpd.conf

# workers.properties 파일 추가
JkWorkersFile conf/workers.properties 


2.4 VirtualHost 설정 변경
•$APACHE_HOME/conf/vhosts/extra/httpd-vhost.conf 파일의 VirtualHost의 DocumentRoot를 Tomcat 디렉토리로 변경하자
•JkMount 설정을 추가하자


httpd-vhost.conf 파일 설정

NameVirtualHost *:80

<VirtualHost *:80>
    ServerName test.apache.org
    DocumentRoot C:\dev\apache-tomcat-6.0.32webapps\ROOT 
 
 # URL중 jsp로 오는 Request만 Tomcat에서 처리 함
 # sample은 workers.properties에서 등록한 worker이름
JkMount  /*.jsp  sample   

# servlet 예제 실행을 위해서 추가
JkMount  /examples/* sample
</VirtualHost> 



2.5 Tomcat의 server.xml 수정
•<Context> 태그의 docBase 디렉토리를 Apache HTTP Server 설정과 동일하게 Tomcat 서버의 webapps/ROOT 디렉토리를 절대경로로 지정하자.


원하는 디렉토리를 Document Root로 사용

<Host name="localhost"  appBase="webapps"
           unpackWARs="true" autoDeploy="true"
           xmlValidation="false" xmlNamespaceAware="false">
 <Context path="" docBase="C:\dev\apache-tomcat-6.0.32\webapps\ROOT" reloadable="true"/>
 ..
</Host>



3. Apache HTTP Server와 Tomcat의 연동 테스트
•Apache와 Tomcat을 모두 restart 한 후 http://test.apache.org/ 로 접속해 보자
•정상적으로 Tomcat 페이지가 실행되었다면 Servlet 예제가 실행되는지 테스트 해보자 http://test.apache.org/examples/servlets/
 
문서정보
• 이 문서는 구루비에서 작성하였습니다. 
• 이 문서를 다른 블로그나 홈페이지에 게재하실 경우에는 출처를 꼭 밝혀 주시면 고맙겠습니다.~^^ 
• 출처 : http://wiki.gurubee.net/pages/viewpage.action?pageId=26739703&
• 구루비 지식창고의 모든 문서는 크리에이티브 커먼즈의 저작자표시-비영리-동일조건변경허락(BY-NC-SA) 라이선스에 따라 자유롭게 사용할 수 있습니다.






tomcat ssl 설정
리눅스 커맨드쉘에서 다음과 같이 입력한다. 유효기간은 10년이다.
keytool -genkey -alias tomcat -keyalg RSA -validity 3650 -keystore tomcat.keystore

$CATALINA_HOME/conf/server.xml 을 vi 편집기로 열어 다음 부분을 찾아 주석을 풀어주고 볼드체의 항목을 추가한다. 기본으로는 주석으로 막혀있다. 패스워드는 위에서 생성한 키 비밀번호를 입력한다.
<Connector port="8443" protocol="HTTP/1.1" SSLEnabled="true"
               maxThreads="150" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS"
               keystoreFile="${user.home}/tomcat.keystore" keystorePass="패스워드"/>
