### tomcat 설정 ###
### 설치 디렉토리 : 
# /app
# /app/tomcat
# 작성일 : 2015.09.20 
# 작성인 : 구본숭

1. 압축 해제
cd app
tar -xvzf apache-tomcat-7.0.64.tar.gz
mv apache-tomcat-7.0.64 tomcat

2. tomcat server.xml 설정
1) Connector port="8080" 부근 URIEncoding="UTF-8" 추가
2) Connector port="8443" 부근 URIEncoding="UTF-8" 추가
  <Service name="Catalina">

    <!--The connectors can use a shared executor, you can define one or more named thread pools-->
    <!--
    <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
        maxThreads="150" minSpareThreads="4"/>
    -->


    <!-- A "Connector" represents an endpoint by which requests are received
         and responses are returned. Documentation at :
         Java HTTP Connector: /docs/config/http.html (blocking & non-blocking)
         Java AJP  Connector: /docs/config/ajp.html
         APR (HTTP/AJP) Connector: /docs/apr.html
         Define a non-SSL HTTP/1.1 Connector on port 8080
    -->
    <Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" URIEncoding="UTF-8" />
    <!-- A "Connector" using the shared thread pool-->
    <!--
    <Connector executor="tomcatThreadPool"
               port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
    -->
    <!-- Define a SSL HTTP/1.1 Connector on port 8443
         This connector uses the BIO implementation that requires the JSSE
         style configuration. When using the APR/native implementation, the
         OpenSSL style configuration is required as described in the APR/native
         documentation -->
    <!--
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"
               maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS" />
    -->

    <!-- Define an AJP 1.3 Connector on port 8009 -->
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" URIEncoding="UTF-8" />


    <!-- An Engine represents the entry point (within Catalina) that processes
         every request.  The Engine implementation for Tomcat stand alone
         analyzes the HTTP headers included with the request, and passes them
         on to the appropriate Host (virtual host).
         Documentation at /docs/config/engine.html -->

    <!-- You should set jvmRoute to support load-balancing via AJP ie :
    <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
    -->
    <Engine name="Catalina" defaultHost="localhost">

      <!--For clustering, please take a look at documentation at:
          /docs/cluster-howto.html  (simple how to)
          /docs/config/cluster.html (reference documentation) -->
      <!--
      <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
      -->

      <!-- Use the LockOutRealm to prevent attempts to guess user passwords
           via a brute-force attack -->
      <Realm className="org.apache.catalina.realm.LockOutRealm">
        <!-- This Realm uses the UserDatabase configured in the global JNDI
             resources under the key "UserDatabase".  Any edits
             that are performed against this UserDatabase are immediately
             available for use by the Realm.  -->
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
               resourceName="UserDatabase"/>
      </Realm>

      <Host name="localhost"  appBase="webapps"
            unpackWARs="true" autoDeploy="true">

        <!-- SingleSignOn valve, share authentication between web applications
             Documentation at: /docs/config/valve.html -->
        <!--
        <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
        -->

        <!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern="common" -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log." suffix=".txt"
               pattern="%h %l %u %t &quot;%r&quot; %s %b" />

      </Host>
    </Engine>
  </Service>

 3. 서비스 설정
 1). 스크립트  만들기
/etc/rc.d/init.d/tomcat 라는 스크립트 파일을 아래 내용같이 만들자
#!/bin/sh
# Startup scipt for Tomcat
#
# chkconfig: 35 85 15
# description: apache tomcat 5.x
#
# processname: tomcat
#deamon이란 명령어는 functions라는 스크립트에서 인클루드 된 것이고,
# Source funtion library
. /etc/rc.d/init.d/functions
# 환경변수를 사용하기 위해 .bash_profile을 초기화 해줬다.
# 환경변수에서 $CATALINA_HOME, $JAVA_HOME은 필수로 export 되어 있어야 한다.
# CATALINA_HOME=<톰켓 설치경로>
# JAVA_HOME=<자바 설치경로>
# export CATALINA_HOME
# export JAVA_HOME
# See how we were called
case "$1" in
    start)
        echo -n "Starting tomcat: "
        daemon $CATALINA_HOME/bin/startup.sh
        touch /var/lock/subsys/tomcat
        echo
        ;;

    stop)
        echo -n "Shutting down tomcat: "
        daemon $CATALINA_HOME/bin/shutdown.sh
        touch /var/lock/subsys/tomcat
        echo
        ;;

    restart)
        $0 stop
        sleep 5
        $0 start
        ;;

    *)
        echo  "Usage: $0 {start|stop|restart}"
        exit 1
esac
exit 0

중요한 것은 서비스 스크립트들은 모두 옵션으로 start, stop은 꼭 구현 되어야 정상적으로 작동한다.
restart까지 구현되어 있음 더 좋다. 이 스크립트는 모두 catalina.sh를 기반으로 만들어진 것들인데..
catalina.sh는 아쉽게도  status의 인자를 처리하는 루틴이 없다.

볼드체로 표기한 것들 중에 chkconfig 부분은 이전 포스트에서 서비스 등록에 관한 글에서  설명하였
다. 확인해보기 바란다. 이전 포스트로...

init.d에서 실행될 경우 .bash_profile의 환경 변수들은 초기화 해줘야 사용 가능하다.

2). 서비스 등록
# chkconfig --add tomcat

3). service 명령어
서비스 등록 후 톰켓을 실행해본다.
# service tomcat start
서비스 실행
# service tomcat stop
서비스 중지
# service tomcat restart
서비스 재시작

#service sendmail status
서비스 상태 조회


[출처] 리눅스에서 tomcat을 서비스에 등록하기|작성자 금잔디

